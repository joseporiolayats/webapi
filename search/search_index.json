{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"WebAPI code assessment","text":""},{"location":"#backend-api-service-using-python","title":"Backend API service using Python","text":"<p>This is a webapp backend service created for the sole purpose of exploring some API use-cases following Python best practices and being as broad and modern as possible so to be compliant with the requirements and also able to further extend its capabilities.</p>"},{"location":"#capabilities","title":"Capabilities","text":"<p>This app is able to provide the following:</p> <ol> <li>[x] Get user data filtered by user ID. Accessed by roles \"users\" and \"admin\"</li> <li>[x] Get user data filtered by user name. Accessed by roles \"users\" and \"admin\"</li> <li>[x] Get the list of policies linked to a user name. Accessed by role \"admin\"</li> <li>[x] Get the user linked to a policy number. Accessed by role \"admin\"</li> </ol>"},{"location":"#license","title":"License","text":"<ul> <li>All the software is opensource and free for personal and commercial use, except MongoDB Atlas which is a service running in a free tier.</li> <li>Authentication and authorization. Take the user role from the web</li> <li>service that returns the   list of company clients.</li> </ul>"},{"location":"#documentation","title":"Documentation","text":"<p>Click here to access the full documentation. It is deployed in Github Pages through MKDocs automatic documentation for python projects.</p>"},{"location":"#cicd-workflow","title":"CI/CD workflow","text":"<p>It is configured for manual auto-testing, linting and documentation deployment through GitHub Actions.</p>"},{"location":"#virtualization","title":"Virtualization","text":"<p>This project is virtualized using Poetry To install poetry run: <pre><code>curl -sSL https://install.python-poetry.org | python3 -\n</code></pre></p>"},{"location":"#data-workflow","title":"Data workflow","text":"<p>It uses MongoDB as the main database for cold storage and operations, and the module also suports using a cached version of the data (currently not fully implemented)</p> <p>In order to work with MongoDB Atlas there is a signup needed and one can use the free tier database, which is a managed database running on AWS. visit mongodb.org</p>"},{"location":"#reproducibility","title":"Reproducibility","text":"<p>As it's using poetry for virtualization, it also uses poetry for package management. The current versions are locked so that all works as intended.</p>"},{"location":"#how-to-install","title":"How to install","text":"<p>First clone the repository <pre><code>git clone https://github.com/joseporiolayats/webapi\n</code></pre></p> <p>Supposing you installed poetry, go into the main directory of the project and type <pre><code>poetry install\n</code></pre> This command will install all the required packages. You will also have a venv available. To activate it run <pre><code>poetry shell\n</code></pre> and type <code>deactivate</code> to exit.</p> <p>Then you will need to create a .env file in the main directory. It has to look like this: <pre><code># .env\nDB_URL=mongodb+srv://[username]@[clustername].wjfxjp0.mongodb.net/test\nDB_NAME=webapiDB\nDB_COLLECTION_CLIENTS=clients\nDB_COLLECTION_POLICIES=policies\nDB_CLIENTS=https://www.mocky.io/v2/5808862710000087232b75ac\nDB_POLICIES=https://www.mocky.io/v2/580891a4100000e8242b75c5\n</code></pre> The DB_URL variable is given by MongoDB Atlas service</p>"},{"location":"#tech-stack","title":"Tech stack","text":"<p>This project makes use of the following main technologies: - Python 3.11.2 - FastAPI, for serving the API endpoints - MongoDB, for storing and manipulating the data. - MongoDB Atlas, cloud hosting for managed database (free tier) - Uvicorn, webserver</p>"},{"location":"#usage","title":"Usage","text":"<p>Run the main.app file and the webapi service will open <pre><code>python main.py\n</code></pre></p>"},{"location":"#api-endpoints","title":"API endpoints","text":"<p>I use the package httpie, which is easy and capable for handling RESTful requests from the console. <pre><code>pip install httpie\n</code></pre></p> <p>There are several endpoints implemented in order to fulfill the requisites of the assessment. - Authentication   - users/register user=MyEmail password=MyPassword   - users/login user=MyEmail password=MyPassword   - users/me token=MyToken</p>"},{"location":"#login-use-case","title":"Login use case","text":"<p><pre><code>http POST localhost:8000/users/login email=\"britneyblankenship@quotezart.com\"\npassword=\"a0ece5db-cd14-4f21-812f-966633e7be86\"\n</code></pre> Which returns ```http request HTTP/1.1 200 OK content-length: 200 content-type: application/json date: Mon, 08 May 2023 08:37:15 GMT server: uvicorn</p> <p>{     \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2ODM1MzcxMzUsImlhdCI6MTY4MzUzNTAzNSwic3ViIjoiYTBlY2U1ZGItY2QxNC00ZjIxLTgxMmYtOTY2NjMzZTdiZTg2In0.ejLX9eno6b5bxWPR296M_AvWiTMzPXPpJWBnw11_g94\" } <pre><code>Then you can copy the token and use it for accessing the restricted areas.\n```commandline\nhttp GET http://localhost:8000/policies Authorization:\"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2ODM1Njc3MTMsImlhdCI6MTY4MzU2NTYxMywic3ViIjoiYTBlY2U1ZGItY2QxNC00ZjIxLTgxMmYtOTY2NjMzZTdiZTg2In0.rM4L3NEbGnDnsjP0NNmD6IEpH22Hcmf9stBkYzm0Itk\"\n</code></pre></p> <p>In order to make things easier, we can use some command line magic in order to store the token into an environment variable <pre><code>export TOKEN=$(curl -s -X POST -H 'Content-Type: application/json' -d '{\"email\": \"britneyblankenship@quotezart.com\", \"password\": \"a0ece5db-cd14-4f21-812f-966633e7be86\"}' http://localhost:8000/users/login | jq -r '.token')\n</code></pre></p> <p>Once you got the token, you copy it and use it to access the restricted sites, or use the environment variable TOKEN <pre><code>echo $TOKEN\n</code></pre></p>"},{"location":"#policies-by-client-name","title":"Policies by client name","text":"<p>Let's try and make the API call to obtain the policies associated to a client name <pre><code>http GET http://localhost:8000/policies/by_client_name/Britney \"Authorization: Bearer $TOKEN\"\n</code></pre> And the answer is positive! we get  all the results! (Not copying here because there are a lot)</p>"},{"location":"#client-name-by-policy","title":"Client name by policy","text":"<p>Now we try the search on reverse: looking up who's the owner of a specified policy. <pre><code>http GET http://localhost:8000/policies/by_policy/0df3bcef-7a14-4dd7-a42d-fa209d0d5804 \"Authorization: Bearer $TOKEN\"\n</code></pre></p>"},{"location":"#client-data-from-name","title":"Client data from name","text":"<p>Let's retrieve the personal data of a client. <pre><code>http GET http://localhost:8000/clients/name/{name} \"Authorization: Bearer $TOKEN\"\n</code></pre></p>"},{"location":"#client-data-from-any-of-the-stored-items","title":"Client data from any of the stored items","text":"<p>Retrieve the personal data of a client by using the name, the phone, the email... <pre><code>http GET http://localhost:8000/clients/{filter}/{value} \"Authorization: Bearer $TOKEN\"\n</code></pre></p>"},{"location":"#future-work","title":"Future work","text":"<p>This project could be drastically improved by adding a frontend, like React or Next.js.</p>"},{"location":"api_documentation/","title":"API Documentation","text":"<p>This documentation covers the API endpoints for the <code>clients</code>, <code>policies</code>, and <code>users</code> routes.</p>"},{"location":"api_documentation/#clients","title":"Clients","text":""},{"location":"api_documentation/#list-clients","title":"List clients","text":"<p>Endpoint: <code>/clients/</code></p> <p>Method: <code>GET</code></p> <p>Description: Lists all clients based on the given filters.</p> <p>Query Parameters:</p> <ul> <li><code>name</code> (optional, string): Filter clients by name.</li> <li><code>id</code> (optional, string): Filter clients by ID.</li> <li><code>role</code> (optional, string): Filter clients by role.</li> <li><code>email</code> (optional, string): Filter clients by email.</li> </ul> <p>Example:</p> <pre><code>http GET 'http://localhost:8000/clients?name=John&amp;id=1&amp;role=admin&amp;email=john@example.com' \"Authorization: Bearer $TOKEN\"\n</code></pre> <p>Success Response:</p> <ul> <li>Code: <code>200 OK</code></li> <li>Content: List of filtered client objects.</li> </ul>"},{"location":"api_documentation/#list-clients-by-name","title":"List clients by name","text":"<p>Endpoint: <code>/clients/name/{name}</code></p> <p>Method: <code>GET</code></p> <p>Description: Lists clients with the given name.</p> <p>Path Parameters:</p> <ul> <li><code>name</code> (required, string): Name to filter clients by.</li> </ul> <p>Example:</p> <pre><code>http GET 'http://localhost:8000/clients/name/John' \"Authorization: Bearer $TOKEN\"\n</code></pre> <p>Success Response:</p> <ul> <li>Code: <code>200 OK</code></li> <li>Content: List of client objects with the given name.</li> </ul>"},{"location":"api_documentation/#list-clients-by-filter","title":"List clients by filter","text":"<p>Endpoint: <code>/clients/{filter}/{value}</code></p> <p>Method: <code>GET</code></p> <p>Description: Lists clients based on the given filter and value.</p> <p>Path Parameters:</p> <ul> <li><code>filter</code> (required, string): Key value for which to select the client.</li> <li><code>value</code> (required, string): Value to filter clients by.</li> </ul> <p>Example:</p> <pre><code>http GET 'http://localhost:8000/clients/role/admin' \"Authorization: Bearer $TOKEN\"\n</code></pre> <p>Success Response:</p> <ul> <li>Code: <code>200 OK</code></li> <li>Content: List of client objects with the given filter and value.</li> </ul>"},{"location":"api_documentation/#policies","title":"Policies","text":""},{"location":"api_documentation/#list-policies","title":"List policies","text":"<p>Endpoint: <code>/policies/</code></p> <p>Method: <code>GET</code></p> <p>Description: Lists all policies based on the given filters.</p> <p>Query Parameters:</p> <ul> <li><code>amountInsured</code> (optional, float): Filter policies by amount insured.</li> <li><code>id</code> (optional, string): Filter policies by ID.</li> <li><code>clientId</code> (optional, string): Filter policies by client ID.</li> <li><code>inceptionDate</code> (optional, datetime): Filter policies by inception date.</li> <li><code>installmentPayment</code> (optional, bool): Filter policies by installment payment.</li> <li><code>email</code> (optional, string): Filter policies by email.</li> </ul> <p>Example: <pre><code>http GET 'http://localhost:8000/policies?amountInsured=1000&amp;id=1&amp;clientId=1&amp;inceptionDate=2023-05-01&amp;installmentPayment=true&amp;email=john@example.com' \"Authorization: Bearer $TOKEN\"\n</code></pre></p> <p>Success Response:</p> <ul> <li>Code: <code>200 OK</code></li> <li>Content: List of filtered policy objects.</li> </ul>"},{"location":"api_documentation/#list-policies-by-client-name","title":"List policies by client name","text":"<p>Endpoint: <code>/policies/by_client_name/{client_name}</code></p> <p>Method: <code>GET</code></p> <p>Description: Lists policies by the given client name.</p> <p>Path Parameters:</p> <ul> <li><code>client_name</code> (required, string): Client name to filter policies by.</li> </ul> <p>Example:</p> <pre><code>http GET 'http://localhost:8000/policies/by_client_name/John' \"Authorization: Bearer $TOKEN\"\n</code></pre> <p>Success Response:</p> <ul> <li>Code: <code>200 OK</code></li> <li>Content: List of policy objects with the given client name or None if not found.</li> </ul>"},{"location":"api_documentation/#list-client-by-policy","title":"List client by policy","text":"<p>**Endpoint: <code>/policies/by_policy/{policy_id}</code></p> <p>Method: <code>GET</code></p> <p>Description: Lists the client associated with the given policy ID.</p> <p>Path Parameters:</p> <ul> <li><code>policy_id</code> (required, string): Policy ID to find the associated client.</li> </ul> <p>Example:</p> <pre><code>http GET 'http://localhost:8000/policies/by_policy/{policy_id}' \"Authorization: Bearer $TOKEN\"\n</code></pre> <p>Success Response:</p> <ul> <li>Code: <code>200 OK</code></li> <li>Content: List of client objects associated with the policy or None if not found.</li> </ul>"},{"location":"api_documentation/#users","title":"Users","text":""},{"location":"api_documentation/#register-user","title":"Register user","text":"<p>Endpoint: <code>/users/register</code></p> <p>Method: <code>POST</code></p> <p>Description: Registers a new user in the system.</p> <p>Request Body:</p> <ul> <li><code>newUser</code> (required, UserBase): New user object.</li> </ul> <p>Example:</p> <pre><code>http POST 'http://localhost:8000/users/register' newUser:='{\"username\": \"newuser\", \"email\": \"newuser@example.com\", \"password\": \"mypassword\", \"role\": \"user\"}'\n</code></pre> <p>Success Response:</p> <ul> <li>Code: <code>201 CREATED</code></li> <li>Content: Created user data.</li> </ul>"},{"location":"api_documentation/#login-user","title":"Login user","text":"<p>Endpoint: <code>/users/login</code></p> <p>Method: <code>POST</code></p> <p>Description: Logs in a user and returns an access token.</p> <p>Request Body:</p> <ul> <li><code>username</code> (required, string): The user's username.</li> <li><code>password</code> (required, string): The user's password.</li> </ul> <p>Example:</p> <pre><code>http POST 'http://localhost:8000/users/login' username='myusername' password='mypassword'\n</code></pre> <p>Success Response:</p> <ul> <li>Code: <code>200 OK</code></li> <li>Content: Access token.</li> </ul> <p>Note: Replace <code>localhost:8000</code> with the appropriate base URL of your API. Also, ensure that you have httpie installed and available on your system.</p>"},{"location":"authentication/","title":"Authentication","text":"<p>webapi/backend/authentication.py</p>"},{"location":"authentication/#webapi.backend.authentication.Authorization","title":"<code>Authorization</code>","text":"<p>Class to handle user authorization and token generation.</p>"},{"location":"authentication/#webapi.backend.authentication.Authorization.auth_wrapper","title":"<code>auth_wrapper(auth=Security(security))</code>","text":"<p>Wrapper function for the token decoding process.</p> <p>Parameters:</p> Name Type Description Default <code>auth</code> <code>HTTPAuthorizationCredentials</code> <code>Security(security)</code> <p>Returns:</p> Name Type Description <code>str</code> <p>User ID from the decoded token.</p>"},{"location":"authentication/#webapi.backend.authentication.Authorization.decode_token","title":"<code>decode_token(token)</code>","text":"<p>Decode the token and return the user ID.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>Token to be decoded.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>User ID from the decoded token.</p> <p>Raises:</p> Type Description <code>HTTPException</code> <p>If the token is expired or invalid.</p>"},{"location":"authentication/#webapi.backend.authentication.Authorization.encode_token","title":"<code>encode_token(user_id)</code>","text":"<p>Encode the token for the given user ID.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str</code> <p>User ID to be encoded in the token.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>Encoded token.</p>"},{"location":"authentication/#webapi.backend.authentication.Authorization.get_password_hash","title":"<code>get_password_hash(password)</code>","text":"<p>Hash the given password.</p> <p>Parameters:</p> Name Type Description Default <code>password</code> <code>str</code> <p>Password to be hashed.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Hashed password.</p>"},{"location":"authentication/#webapi.backend.authentication.Authorization.verify_password","title":"<code>verify_password(plain_password, hashed_password)</code>","text":"<p>Verify if the plain password matches the hashed password.</p> <p>Parameters:</p> Name Type Description Default <code>plain_password</code> <code>str</code> <p>Plain password to be verified.</p> required <code>hashed_password</code> <code>str</code> <p>Hashed password to be compared.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the passwords match, False otherwise.</p>"},{"location":"data/","title":"Data","text":"<p>The provided data for this exercise is as follows</p>"},{"location":"data/#1-list-of-company-clients","title":"1. List of company clients","text":"<p>The clients can be obtained via a call to https://www.mocky.io/v2/5808862710000087232b75ac</p> <p>The structure of the clients data is as follows: <pre><code>id: \"a0ece5db-cd14-4f21-812f-966633e7be86\",\nname: \"Britney\",\nemail: \"britneyblankenship@quotezart.com\",\nrole: \"admin\"\n</code></pre></p>"},{"location":"data/#2-list-of-company-policies","title":"2. List of company policies","text":"<p>The first set of data can be obtained from this URL https://www.mocky.io/v2/580891a4100000e8242b75c5</p> <p>The structure of the policies data is as follows: <pre><code>id: \"64cceef9-3a01-49ae-a23b-3761b604800b\"\namountInsured: 1825.89\nemail: \"inesblankenship@quotezart.com\"\ninceptionDate: \"2016-06-01T03:33:32Z\"\ninstallmentPayment: true\nclientId: \"e8fd159b-57c4-4d36-9bd7-a59ca13057bb\"\n</code></pre></p>"},{"location":"data/#3-list-of-roles","title":"3. List of roles","text":"<p>By the problem description, there should be 3 roles 1. Admin (super-user) 2. User (authenticated) 3. Guest (unauthenticated)</p>"},{"location":"database/","title":"Database","text":"<p>::: webapi.data.database</p>"},{"location":"dataflow/","title":"Dataflow","text":""},{"location":"json_handler/","title":"JSON handler","text":"<p>webapi/data/json_handler.py</p>"},{"location":"json_handler/#webapi.data.json_handler.JSONData","title":"<code>JSONData</code>","text":""},{"location":"json_handler/#webapi.data.json_handler.JSONData.__init__","title":"<code>__init__(url)</code>","text":"<p>Initialize the JSONData class.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL for fetching JSON data.</p> required"},{"location":"json_handler/#webapi.data.json_handler.JSONData.fetch_data_from_json_url","title":"<code>fetch_data_from_json_url(url=None)</code>  <code>async</code>","text":"<p>Fetch JSON data from the provided URL.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>Optional[str]</code> <p>The URL for fetching JSON data (optional).</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[Dict, List, None]</code> <p>A dictionary or a list containing the fetched JSON data, or None if an error occurs.</p>"},{"location":"preload_data/","title":"Preload data into DB","text":"<p>webapi/data/preload_data.py</p> <p>This script is used to fill up the database with the given data from the problem statement.</p> <p>There will be two calls, one for each data source.</p>"},{"location":"problem/","title":"WebAPI code assessment","text":""},{"location":"problem/#backend-api-service-using-python","title":"Backend API service using Python","text":"<p>This is a webapp backend service created for the sole purpose of exploring some API use-cases following Python best practices and being as broad and modern as possible so to be compliant with the requirements and also able to further extend its capabilities.</p>"},{"location":"problem/#1-requirements","title":"1. Requirements","text":"<p>The requirements to be met are:</p> <p>-[x] Get user data filtered by user ID. Accessed by roles \"users\" and \"admin\" -[x] Get user data filtered by user name. Accessed by roles \"users\" and \"admin\" -[x] Get the list of policies linked to a user name. Accessed by role \"admin\" -[x] Get the user linked to a policy number. Accessed by role \"admin\"</p>"},{"location":"problem/#2-constraints","title":"2. Constraints","text":"<ul> <li>Licences</li> <li>Authentication and authorization. Take the user role from the web  service that returns the   list of company clients.</li> </ul>"},{"location":"problem/#3-additional-details","title":"3. Additional details","text":"<p>Tips to consider in order to broaden the spectrum of the application. - Usage of last technologies - Solution properly structured - Usage of patterns - Ensure product quality and maintenance in case of an error. - Documentation</p>"},{"location":"solution/","title":"Solution","text":""},{"location":"solution/#proposed-solution-documentation","title":"Proposed Solution Documentation","text":"<p>This document describes the proposed solution for the WebAPI code assessment, a backend API service created using Python and FastAPI. The goal of this service is to provide a modern, secure, and extensible API for managing user data and policies.</p>"},{"location":"solution/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Overview</li> <li>Requirements</li> <li>Solution Architecture</li> <li>Technologies Used</li> <li>Authentication and Authorization</li> <li>Code Structure and Patterns</li> <li>Error Handling and Quality Assurance</li> <li>Documentation</li> </ul>"},{"location":"solution/#overview","title":"Overview","text":"<p>The backend API service aims to provide the following features:</p> <ol> <li>Retrieve user data filtered by user ID or user name.</li> <li>Retrieve the list of policies linked to a user name.</li> <li>Retrieve the user linked to a policy number.</li> </ol> <p>Access to these features is restricted based on the user's role, as described in the requirements.</p>"},{"location":"solution/#requirements","title":"Requirements","text":"<p>The service is designed to meet the following requirements:</p> <ul> <li>Get user data filtered by user ID. Accessed by roles \"users\" and \"admin\".</li> <li>Get user data filtered by user name. Accessed by roles \"users\" and \"admin\".</li> <li>Get the list of policies linked to a user name. Accessed by role \"admin\".</li> <li>Get the user linked to a policy number. Accessed by role \"admin\".</li> </ul>"},{"location":"solution/#solution-architecture","title":"Solution Architecture","text":"<p>The proposed solution uses FastAPI, a modern and high-performance Python web framework, to create the API endpoints. FastAPI is built on top of Starlette and Pydantic, offering excellent performance, easy-to-use data validation, and automatic API documentation generation.</p> <p>The application is divided into several modules and components, including:</p> <ul> <li><code>main.py</code>: The main FastAPI application entry point.</li> <li><code>models.py</code>: Pydantic models for data validation and serialization.</li> <li><code>routers/</code>: Router modules for organizing and handling API endpoints.</li> <li><code>data/</code>: Modules for handling data storage and retrieval, including the MongoDB Atlas database connection and caching.</li> <li><code>authentication.py</code>: Module for handling user authentication and authorization.</li> </ul>"},{"location":"solution/#technologies-used","title":"Technologies Used","text":"<p>The key technologies used in the solution include:</p> <ul> <li>FastAPI: A modern, high-performance Python web framework.</li> <li>MongoDB Atlas: A fully managed, global cloud database service for MongoDB.</li> <li>JSON Web Tokens (JWT): A compact, URL-safe means of representing claims to be transferred between two parties.</li> <li>Pydantic: A data validation and parsing library for Python.</li> <li>HTTPie: A user-friendly command-line HTTP client for API testing.</li> </ul>"},{"location":"solution/#authentication-and-authorization","title":"Authentication and Authorization","text":"<p>The application uses JWT (JSON Web Tokens) for authentication. After a user registers or logs in, a JWT token is returned. This token must be included in the <code>Authorization</code> header for all requests to restricted endpoints. The user's role is taken from the web service that returns the list of company clients and is used to control access to specific endpoints based on the role requirements.</p>"},{"location":"solution/#code-structure-and-patterns","title":"Code Structure and Patterns","text":"<p>The solution follows a modular and organized code structure to ensure maintainability and extensibility. The key patterns used include:</p> <ul> <li>Router modules: FastAPI routers are used to organize and separate the API endpoints into logical groups.</li> <li>Dependency injection: FastAPI's dependency injection system is used to provide shared resources such as the database connection and authentication components.</li> <li>Data access layer: The <code>data/</code> directory contains modules for handling data storage and retrieval, separating these concerns from the API endpoints.</li> </ul>"},{"location":"solution/#error-handling-and-quality-assurance","title":"Error Handling and Quality Assurance","text":"<p>The solution includes error handling and logging to ensure product quality and maintainability. FastAPI's built-in exception handling is used to catch and handle errors gracefully, returning appropriate HTTP status codes and error messages. The application also uses a custom logger to log errors and other important events, making it easier to diagnose and resolve issues.</p> <p>To further ensure product quality, unit tests and integration tests can be written to cover the critical functionality of the application. FastAPI's built-in test client can be used to simulate API requests and validate the responses. By implementing a comprehensive test suite, the application's stability and reliability can be maintained as new features are added or existing features are modified.</p>"},{"location":"solution/#documentation","title":"Documentation","text":"<p>Documentation plays a crucial role in helping developers understand and use the API effectively. The FastAPI application automatically generates API documentation using the OpenAPI and JSON Schema standards. This interactive documentation, available at <code>/docs</code> and <code>/redoc</code> by default, allows developers to explore the API endpoints, view the expected request and response formats, and even try out the API directly from their browser.</p> <p>In addition to the auto-generated API documentation, a comprehensive user guide and reference documentation can be created using tools like MkDocs or Sphinx. This documentation should cover topics such as setting up the application, authentication and authorization, example usage of the API endpoints, and any additional information necessary for developers to work effectively with the API.</p> <p>By providing clear and up-to-date documentation, the API will be more accessible to developers, making it easier for them to build applications that integrate with the backend service.</p>"},{"location":"store_json/","title":"Store JSON","text":""},{"location":"store_json/#webapi.data.store_json.JSONDataToCache","title":"<code>JSONDataToCache</code>","text":"<p>         Bases: <code>JSONData</code></p> <p>A class for loading JSON data into cache.</p>"},{"location":"store_json/#webapi.data.store_json.JSONDataToCache.get_cache","title":"<code>get_cache()</code>  <code>async</code>","text":"<p>Get the current cache.</p> <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary containing the cached data.</p>"},{"location":"store_json/#webapi.data.store_json.JSONDataToCache.load_data_to_cache","title":"<code>load_data_to_cache(name)</code>  <code>async</code>","text":"<p>Load the data from URL in a dictionary to act as cache.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the cached data</p> required <p>Returns:</p> Type Description <code>dict[Any, Any]</code> <p>None</p>"},{"location":"store_json/#webapi.data.store_json.JSONDataToCache.search_cached_data","title":"<code>search_cached_data(name, search_params)</code>  <code>async</code>","text":"<p>Search for data in the cached JSON data.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the data in the cache.</p> required <code>search_params</code> <code>Dict[str, str]</code> <p>A dictionary containing the search parameters.</p> required <p>Returns:</p> Type Description <code>Union[List, None]</code> <p>A list of matching data if found, otherwise None.</p>"},{"location":"store_json/#webapi.data.store_json.JSONDataToMongoDB","title":"<code>JSONDataToMongoDB</code>","text":"<p>         Bases: <code>JSONData</code></p> <p>A class for storing JSON data into MongoDB.</p>"},{"location":"store_json/#webapi.data.store_json.JSONDataToMongoDB.store_json_data","title":"<code>store_json_data(data)</code>  <code>async</code>","text":"<p>Store JSON data into the MongoDB database.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Union[Dict, List]</code> <p>The JSON data to store in the database.</p> required <code>database</code> <p>The database to store the JSON data in.</p> required"},{"location":"usage/","title":"Usage","text":""}]}